using System;

namespace Library
{

    public class Library
    {
        static void Main(string[] args)
        {
            // Demostracion del patron 'Factory Method'
            Console.WriteLine("Demostracion del patron Factory Method");
            BookFactory factory = new();

            Book sciFiBook = factory.ProvideBook("La Mosca", "George Langelaan", "scifi");
            Book fantasyBook = factory.ProvideBook("Harry Potter", "JK Rowling", "fantasy");
            Book horrorBook = factory.ProvideBook("IT", "Stephen King", "horror");

            Console.WriteLine("Sci-Fi Book:");
            Console.WriteLine("Title: " + sciFiBook.GetTitle());
            Console.WriteLine("Author: " + sciFiBook.GetAuthor());
            Console.WriteLine("Genre: " + sciFiBook.GetGenre());
            Console.WriteLine("");
            Console.WriteLine("Fantasy Book:");
            Console.WriteLine("Title: " + fantasyBook.GetTitle());
            Console.WriteLine("Author: " + fantasyBook.GetAuthor());
            Console.WriteLine("Genre: " + fantasyBook.GetGenre());
            Console.WriteLine("");
            Console.WriteLine("Horror Book:");
            Console.WriteLine("Title: " + horrorBook.GetTitle());
            Console.WriteLine("Author: " + horrorBook.GetAuthor());
            Console.WriteLine("Genre: " + horrorBook.GetGenre());
            Console.WriteLine("");

            // Desmostracion del patron "Adapter"
            // Crear instancias de las clases relevantes
            Console.WriteLine("Demostracion del patron Adapter");
            IUserManager userManager = new UserManager();
            ILibraryManager libraryManager = new LibraryManager();

            // Crear instancias de los adaptadores
            ILibraryPanel libraryPanel = new LibraryPanelAdapter(libraryManager, userManager);

            // Ejemplo de uso del sistema de autenticación y préstamo de libro
            Console.WriteLine("Bienvenido a la biblioteca:");
            libraryPanel.UserAuthentication(); // Autenticar usuario
            libraryPanel.BorrowBook(); // Pedir prestado un libro
            libraryPanel.UserLogout(); // Cerrar sesión

            // Demostracion del patron "Observer"
            // Crear usuarios (observadores)
            Console.WriteLine("Demostracion del patron Observer");
            Student student = new Student("Jose", "Student");
            LibraryChief libraryChief = new LibraryChief("Raul", "Library Chief");

            // Registrar los usuarios como observadores del libro
            sciFiBook.RegisterObserver(student);
            sciFiBook.RegisterObserver(libraryChief);

            // El estudiante pide prestado el libro
            Console.WriteLine($"Estudiante {student.GetName()} pidió prestado el libro '{sciFiBook.GetTitle()}'");
            // Cambiar el estado del libro y notificar a los observadores
            sciFiBook.BorrowBook();
            sciFiBook.NotifyObservers();

            // Esto imprimirá un mensaje para cada observador indicando que el libro ha sido prestado
            Console.WriteLine("Presiona cualquier tecla para salir...");
            Console.ReadKey();
        }
    }

    // La clase LibraryPanel ahora acepta "IUserOperation" en lugar de IUserManager e ILibraryManager directamente
    public class LibraryPanelAdapter(ILibraryManager libraryManager, IUserManager userManager) : ILibraryPanel
    {
        ILibraryManager libraryManager = libraryManager;
        IUserManager userManager = userManager;
        public void AddBook()
        {
            libraryManager.AddBook();
        }

        public void BorrowBook()
        {
            libraryManager.BorrowBook();
        }

        public void ReturnBook()
        {
            libraryManager.ReturnBook();
        }

        public void SaveBook()
        {
            libraryManager.SaveBook();
        }

        public void UserActivity()
        {
            userManager.UserActivity();
        }

        public void UserAuthentication()
        {
            userManager.UserAuthentication();
        }

        public void UserLogout()
        {
            userManager.UserLogout();
        }

        public void UserStatus()
        {
            userManager.UserStatus();
        }
    }

    public interface ILibraryPanel
    {
        void BorrowBook();
        void AddBook();
        void ReturnBook();
        void SaveBook();
        void UserStatus();
        void UserActivity();
        void UserLogout();
        void UserAuthentication();
    }

    // Se aplica el principio de (ISP)
    // Debido a que se hace interfaces especificas donde se tiene una alta cohesion en sus
    // metodos y existe un bajo acoplamiento
    public interface ILibraryManager
    {
        public void BorrowBook();
        public void AddBook();
        public void ReturnBook();
        public void SaveBook();
    }

    public class LibraryManager : ILibraryManager
    {
        public void AddBook()
        {
            Console.WriteLine("Libro Añadido");
        }
        public void SaveBook()
        {
            Console.WriteLine("Libro Guardado");
        }

        public void BorrowBook()
        {
            Console.WriteLine("Libro Prestado");
        }

        public void ReturnBook()
        {
            Console.WriteLine("Libro Devuelto");
        }
    }

    public interface IUserManager
    {
        public void UserStatus();

        public void UserActivity();

        public void UserLogout();

        public void UserAuthentication();
    }

    public class UserManager : IUserManager
    {
        public void UserStatus()
        {
            Console.WriteLine("Esta en sin deudas");
        }

        public void UserActivity()
        {
            Console.WriteLine("Esta leyendo libros");
        }

        public void UserAuthentication()
        {
            Console.WriteLine("Es usuario a iniciado sesion...");
        }

        public void UserLogout()
        {
            Console.WriteLine("El usuario ha cerrado sesion...");
        }
    }

    // Usaremos el patron de creacion 'Factory Method' para la creacion de los libros
    // Instanciaremos la clase abstracta 'BookFactory' para crear las instancias de los libros

    public class BookFactory
    {
        public Book ProvideBook(string title, string author, string genre)
        {
            switch (genre.ToLower())
            {
                case "fantasy":
                    return new FantasyBook(title, author);
                case "scifi":
                    return new SciFiBook(title, author);
                case "horror":
                    return new HorrorBook(title, author);
                default:
                    throw new ArgumentException("This genre doesn't exist in the Library");
            }
        }
    }


    public abstract class Book(string title, string author) : IBookObservable
    {
        private List<IUserObserver> observers = new List<IUserObserver>();
        public string title = title;
        public string author = author;

        public string GetTitle()
        {
            return title;
        }

        public string GetAuthor()
        {
            return author;
        }

        public abstract string GetGenre();
        public abstract void BorrowBook();

        // Implementa métodos para registrar, desregistrar y notificar observadores
        public void RegisterObserver(IUserObserver observer)
        {
            observers.Add(observer);
        }

        public void RemoveObserver(IUserObserver observer)
        {
            observers.Remove(observer);
        }

        public void NotifyObservers()
        {
            foreach (var observer in observers)
            {
                observer.Update(this);
            }
        }
    }

    public class SciFiBook(string title, string author) : Book(title, author)
    {
        public override string GetGenre()
        {
            return "Science Fiction Book";
        }
        public override void BorrowBook()
        {
            Console.WriteLine($"El libro '{title}' de ciencia ficcion ha sido prestado.");
        }
    }

    public class FantasyBook(string title, string author) : Book(title, author)
    {
        public override string GetGenre()
        {
            return "Fantasy Book";
        }
        public override void BorrowBook()
        {
            Console.WriteLine($"El libro '{title}' de fantasia ha sido prestado.");
        }
    }

    public class HorrorBook(string title, string author) : Book(title, author)
    {
        public override string GetGenre()
        {
            return "Horror Book";
        }
        public override void BorrowBook()
        {
            Console.WriteLine($"El libro '{title}' de horror ha sido prestado.");
        }
    }

    // Usaremos el patron de comportamiento 'Observer' para ver los cambios de estado de los libros

    // Define una interfaz para los observadores (usuarios)
    public interface IUserObserver
    {
        void Update(Book book);
    }

    // Define una interfaz para el sujeto observable (libro)
    public interface IBookObservable
    {
        void RegisterObserver(IUserObserver observer);
        void RemoveObserver(IUserObserver observer);
        void NotifyObservers();
    }

    // Aqui se aplica (LSP) debido al tipo de usuario que hay
    // porque si bien los usuarios 'Student' y 'LibraryChief' tiene algunos comportamientos
    // iguales el 'LibraryChief' puede tener control de sistema de la Biblioteca
    // a diferencia del 'Student' que tiene limite en lo que pude hacer

    public class User(string name, string role)
    {
        public string name = name;
        public string role = role;

        public string GetName()
        {
            return name;
        }

        public string GetRole()
        {
            return role;
        }
    }

    public class Student(string name, string role) : User(name, role), IUserObserver
    {
        public void GetBorrowBook()
        {
            Console.WriteLine("Pedir libro prestado");
        }

        public void Update(Book book)
        {
            Console.WriteLine($"Estudiante {name} ha recibido una notificación sobre el libro '{book.GetTitle()}'");
        }
    }

    public class LibraryChief(string name, string role) : User(name, role), IUserObserver
    {
        public void AuthorizationSystem()
        {
            Console.WriteLine("Acceso al sistema de la Biblioteca");
        }

        public void Update(Book book)
        {
            Console.WriteLine($"Jefe de biblioteca {name} ha recibido una notificación sobre el libro '{book.GetTitle()}'");
        }
    }
}